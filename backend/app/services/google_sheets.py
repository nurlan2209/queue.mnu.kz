import json
import logging
import os
from typing import List, Dict, Any
from datetime import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from sqlalchemy.orm import Session

from app.models.archive import ArchivedQueueEntry
from app.config import settings

logger = logging.getLogger(__name__)

GOOGLE_SHEETS_ID = "1kh8mEKZHSo3vZAK7Z6FoH12Y03WJXhnJx5xA4AoMTP8"
SHEET_NAME = "Queue Data"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏—Å—Ç

STATUS_TRANSLATIONS = {
    "waiting": "–û–∂–∏–¥–∞–Ω–∏–µ",
    "in_progress": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", 
    "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
    "paused": "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
    "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–æ"
}

def translate_status(status_value: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
    if not status_value:
        return ""
    return STATUS_TRANSLATIONS.get(status_value.lower(), status_value)

class GoogleSheetsService:
    def __init__(self):
        self.credentials = None
        self.service = None
        self.spreadsheet_id = GOOGLE_SHEETS_ID
        self._initialize()
    
    def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            credentials_paths = [
                "credentials.json",
                "/app/credentials.json", 
                "/app/focus-strand-462605-u4-591149cd753b.json",
                "/app/focus-strand-462605-u4-591149cd753b.json",  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                "focus-strand-462605-u4-591149cd753b.json",
                "focus-strand-462605-u4-591149cd753b.json"
            ]
            
            credentials_path = None
            for path in credentials_paths:
                if os.path.exists(path):
                    credentials_path = path
                    break
            
            if not credentials_path:
                logger.warning("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω. Google Sheets —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                return
            
            logger.info(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º credentials —Ñ–∞–π–ª: {credentials_path}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º credentials —Ñ–∞–π–ª
            cred_data = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            try:
                with open(credentials_path, 'r') as f:
                    cred_data = json.load(f)
                
                required_fields = ['client_email', 'private_key', 'project_id']
                for field in required_fields:
                    if field not in cred_data:
                        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ credentials —Ñ–∞–π–ª–µ")
                        return
                
                logger.info(f"‚úÖ Credentials —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω. Service account: {cred_data.get('client_email')}")
                logger.info(f"üîë Project ID: {cred_data.get('project_id')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç private key
                private_key = cred_data.get('private_key', '')
                if not private_key.startswith('-----BEGIN PRIVATE KEY-----'):
                    logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç private key")
                    return
                
                logger.info("‚úÖ –§–æ—Ä–º–∞—Ç private key –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π JSON –≤ credentials —Ñ–∞–π–ª–µ: {e}")
                return
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è credentials —Ñ–∞–π–ª–∞: {e}")
                return
            
            # –°–æ–∑–¥–∞–µ–º credentials –æ–±—ä–µ–∫—Ç
            try:
                self.credentials = service_account.Credentials.from_service_account_file(
                    credentials_path,
                    scopes=['https://www.googleapis.com/auth/spreadsheets']
                )
                logger.info("‚úÖ Credentials –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è credentials –æ–±—ä–µ–∫—Ç–∞: {e}")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
            try:
                self.service = build('sheets', 'v4', credentials=self.credentials)
                logger.info(f"‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –¢–∞–±–ª–∏—Ü–∞: {self.spreadsheet_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Google Sheets —Å–µ—Ä–≤–∏—Å–∞: {e}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ
            try:
                spreadsheet = self.service.spreadsheets().get(
                    spreadsheetId=self.spreadsheet_id
                ).execute()
                
                title = spreadsheet.get('properties', {}).get('title', 'Unknown')
                logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {title}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–∏—Å—Ç—ã
                sheets = spreadsheet.get('sheets', [])
                if sheets:
                    sheet_names = [sheet.get('properties', {}).get('title', 'Unknown') for sheet in sheets]
                    logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: {', '.join(sheet_names)}")
                else:
                    logger.warning("‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –ª–∏—Å—Ç–æ–≤")
                    
            except HttpError as e:
                error_details = str(e)
                if "not found" in error_details.lower():
                    logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. ID: {self.spreadsheet_id}")
                    logger.error("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
                elif "permission" in error_details.lower() or "forbidden" in error_details.lower():
                    logger.error(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ. –°–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {cred_data.get('client_email')}")
                    logger.error("üí° –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –∫ —Ç–∞–±–ª–∏—Ü–µ")
                else:
                    logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Ç–∞–±–ª–∏—Ü–µ: {e}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets API: {e}")
            self.credentials = None
            self.service = None
    
    def _is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Google Sheets API"""
        return self.service is not None and self.credentials is not None
    
    def prepare_headers(self) -> List[str]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Google Sheets"""
        return [
            "ID",
            "Original ID", 
            "Queue Number",
            "Full Name",
            "Phone",
            "Programs",
            "Status",
            "Notes",
            "Assigned Employee",
            "Created At",
            "Updated At", 
            "Completed At",
            "Processing Time",
            "Form Language",
            "Archived At",
            "Archive Reason"
        ]
    
    def prepare_row_data(self, entry: ArchivedQueueEntry) -> List[str]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è Google Sheets"""
        return [
            str(entry.id),
            str(entry.original_id),
            str(entry.queue_number),
            entry.full_name or "",
            entry.phone or "",
            json.dumps(entry.programs) if entry.programs else "[]",
            translate_status(entry.status.value) if entry.status else "",
            entry.notes or "",
            entry.assigned_employee_name or "",
            entry.created_at.isoformat() if entry.created_at else "",
            entry.updated_at.isoformat() if entry.updated_at else "",
            entry.completed_at.isoformat() if entry.completed_at else "",
            str(entry.processing_time) if entry.processing_time else "",
            entry.form_language or "",
            entry.archived_at.isoformat() if entry.archived_at else "",
            entry.archive_reason or ""
        ]
    
    def _find_row_by_id(self, entry_id: str) -> int:
        """üÜï –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –ø–æ ID –∑–∞–ø–∏—Å–∏"""
        try:
            search_range = f'{SHEET_NAME}!A:A'  # –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ A (ID)
            search_result = self.service.spreadsheets().values().get(
                spreadsheetId=self.spreadsheet_id,
                range=search_range
            ).execute()
            
            values = search_result.get('values', [])
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º ID
            for i, row in enumerate(values):
                if row and len(row) > 0 and row[0] == str(entry_id):
                    return i + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ ID {entry_id}: {e}")
            return None
    
    def sync_all_data(self, db: Session) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞—Ä—Ö–∏–≤–∞"""
        if not self._is_available():
            return {"success": False, "error": "Google Sheets API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞
            entries = db.query(ArchivedQueueEntry).order_by(ArchivedQueueEntry.archived_at.desc()).all()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            headers = self.prepare_headers()
            rows_data = [headers]  # –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            
            for entry in entries:
                rows_data.append(self.prepare_row_data(entry))
            
            # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            range_name = SHEET_NAME
            
            # –û—á–∏—Å—Ç–∫–∞ –ª–∏—Å—Ç–∞
            clear_request = self.service.spreadsheets().values().clear(
                spreadsheetId=self.spreadsheet_id,
                range=range_name
            )
            clear_request.execute()
            
            # –ó–∞–ø–∏—Å—å –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            update_request = self.service.spreadsheets().values().update(
                spreadsheetId=self.spreadsheet_id,
                range=range_name,
                valueInputOption='RAW',
                body={'values': rows_data}
            )
            
            result = update_request.execute()
            
            logger.info(f"‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {len(entries)} –∑–∞–ø–∏—Å–µ–π –≤ Google Sheets")
            
            return {
                "success": True,
                "updated_rows": result.get('updatedRows', 0),
                "updated_cells": result.get('updatedCells', 0),
                "total_entries": len(entries),
                "timestamp": datetime.now().isoformat()
            }
            
        except HttpError as e:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ Google Sheets API: {e}")
            if "Invalid JWT Signature" in str(e):
                logger.error("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å credentials.json –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
            return {"success": False, "error": str(e)}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return {"success": False, "error": str(e)}
    
    def add_single_entry(self, entry: ArchivedQueueEntry) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã"""
        if not self._is_available():
            logger.warning("‚ö†Ô∏è Google Sheets API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–∞–ø–∏—Å–∏")
            return {"success": False, "error": "Google Sheets API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
            
        try:
            row_data = self.prepare_row_data(entry)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
            append_request = self.service.spreadsheets().values().append(
                spreadsheetId=self.spreadsheet_id,
                range=SHEET_NAME,
                valueInputOption='RAW',
                insertDataOption='INSERT_ROWS',
                body={'values': [row_data]}
            )
            
            result = append_request.execute()
            
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å {entry.id} –≤ Google Sheets")
            
            return {
                "success": True,
                "updated_rows": result.get('updates', {}).get('updatedRows', 0),
                "entry_id": entry.id,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            if "Invalid JWT Signature" in str(e):
                logger.error("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ credentials.json")
            return {"success": False, "error": str(e)}
    
    def update_entry_by_id(self, entry: ArchivedQueueEntry) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–æ ID"""
        if not self._is_available():
            logger.warning("‚ö†Ô∏è Google Sheets API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
            return {"success": False, "error": "Google Sheets API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
            
        try:
            row_index = self._find_row_by_id(entry.id)
            
            if row_index is None:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                logger.info(f"üìù –ó–∞–ø–∏—Å—å {entry.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Google Sheets, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é")
                return self.add_single_entry(entry)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
            row_data = self.prepare_row_data(entry)
            range_name = f'{SHEET_NAME}!A{row_index}:P{row_index}'  # A-P –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            
            update_request = self.service.spreadsheets().values().update(
                spreadsheetId=self.spreadsheet_id,
                range=range_name,
                valueInputOption='RAW',
                body={'values': [row_data]}
            )
            
            result = update_request.execute()
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å {entry.id} –≤ Google Sheets (—Å—Ç—Ä–æ–∫–∞ {row_index})")
            
            return {
                "success": True,
                "updated_rows": result.get('updatedRows', 0),
                "entry_id": entry.id,
                "row_index": row_index,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            if "Invalid JWT Signature" in str(e):
                logger.error("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ credentials.json")
            return {"success": False, "error": str(e)}
    
    def delete_entry_by_id(self, entry_id: str) -> Dict[str, Any]:
        """üÜï –ù–û–í–û–ï: –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ Google Sheets –ø–æ ID"""
        if not self._is_available():
            logger.warning("‚ö†Ô∏è Google Sheets API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
            return {"success": False, "error": "Google Sheets API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
            
        try:
            row_index = self._find_row_by_id(entry_id)
            
            if row_index is None:
                logger.warning(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å {entry_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Google Sheets –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return {"success": True, "message": "–ó–∞–ø–∏—Å—å —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Google Sheets"}
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
            delete_request = self.service.spreadsheets().batchUpdate(
                spreadsheetId=self.spreadsheet_id,
                body={
                    "requests": [
                        {
                            "deleteDimension": {
                                "range": {
                                    "sheetId": 0,  # ID –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞
                                    "dimension": "ROWS",
                                    "startIndex": row_index - 1,  # 0-based index
                                    "endIndex": row_index  # exclusive
                                }
                            }
                        }
                    ]
                }
            )
            
            result = delete_request.execute()
            
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å {entry_id} –∏–∑ Google Sheets (—Å—Ç—Ä–æ–∫–∞ {row_index})")
            
            return {
                "success": True,
                "entry_id": entry_id,
                "deleted_row": row_index,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {entry_id}: {e}")
            if "Invalid JWT Signature" in str(e):
                logger.error("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ credentials.json")
            return {"success": False, "error": str(e)}

    def set_spreadsheet_id(self, spreadsheet_id: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.spreadsheet_id = spreadsheet_id
        logger.info(f"Google Sheets ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {spreadsheet_id}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
google_sheets_service = GoogleSheetsService()