import logging
from datetime import datetime
from sqlalchemy.orm import Session
from sqlalchemy import event

from app.database import SessionLocal
from app.models.archive import ArchivedQueueEntry

logger = logging.getLogger(__name__)

class RealTimeSyncScheduler:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self):
        self.is_initialized = False
        self._setup_database_events()
    
    def _setup_database_events(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        if self.is_initialized:
            return
        
        # –°–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        @event.listens_for(ArchivedQueueEntry, 'after_insert')
        def after_insert_listener(mapper, connection, target):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –∞—Ä—Ö–∏–≤"""
            logger.info(f"üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –∞—Ä—Ö–∏–≤–µ: {target.id}")
            self._handle_insert(target)
        
        # –°–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        @event.listens_for(ArchivedQueueEntry, 'after_update')
        def after_update_listener(mapper, connection, target):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∞—Ä—Ö–∏–≤–µ"""
            logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∞—Ä—Ö–∏–≤–µ: {target.id}")
            self._handle_update(target)
        
        self.is_initialized = True
        logger.info("‚úÖ Database events –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def _handle_insert(self, target: ArchivedQueueEntry):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            from app.services.google_sheets import google_sheets_service
            
            logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å {target.id} —Å Google Sheets")
            result = google_sheets_service.add_single_entry(target)
            
            if result["success"]:
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {target.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {target.id}: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {target.id}: {e}")
    
    def _handle_update(self, target: ArchivedQueueEntry):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        try:
            from app.services.google_sheets import google_sheets_service
            
            logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {target.id} —Å Google Sheets")
            result = google_sheets_service.update_entry_by_id(target)
            
            if result["success"]:
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {target.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {target.id}: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {target.id}: {e}")
    
    def get_sync_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            db = SessionLocal()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∞—Ä—Ö–∏–≤–µ
            total_entries = db.query(ArchivedQueueEntry).count()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞)
            try:
                from app.models.sync_settings import SyncLog
                recent_logs = db.query(SyncLog).order_by(
                    SyncLog.created_at.desc()
                ).limit(10).all()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                from datetime import timedelta
                yesterday = datetime.now() - timedelta(days=1)
                
                recent_success = db.query(SyncLog).filter(
                    SyncLog.created_at >= yesterday,
                    SyncLog.status == "success"
                ).count()
                
                recent_errors = db.query(SyncLog).filter(
                    SyncLog.created_at >= yesterday,
                    SyncLog.status == "error"
                ).count()
                
                log_data = [
                    {
                        "operation": log.operation,
                        "status": log.status,
                        "message": log.message,
                        "created_at": log.created_at.isoformat()
                    }
                    for log in recent_logs
                ]
                
            except ImportError:
                recent_success = 0
                recent_errors = 0
                log_data = []
            
            return {
                "total_entries": total_entries,
                "recent_success": recent_success,
                "recent_errors": recent_errors,
                "recent_logs": log_data
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)}
        finally:
            db.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
realtime_sync = RealTimeSyncScheduler()

def initialize_sync_scheduler():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        realtime_sync._setup_database_events()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False

def shutdown_sync_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def check_sync_health() -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        db = SessionLocal()
        
        try:
            from app.models.sync_settings import SyncSettings
            settings = db.query(SyncSettings).first()
            
            if not settings:
                return {"status": "not_configured", "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
            
            if not settings.is_enabled:
                return {"status": "disabled", "message": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"}
            
            if not settings.google_sheets_id:
                return {"status": "misconfigured", "message": "Google Sheets ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
            
            return {
                "status": "healthy",
                "message": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
                "last_sync": settings.last_sync_at.isoformat() if settings.last_sync_at else None
            }
            
        except ImportError:
            # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
            return {"status": "not_configured", "message": "–¢–∞–±–ª–∏—Ü—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã"}
        
    except Exception as e:
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"}
    finally:
        db.close()

def manual_sync_trigger() -> dict:
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    logger.info("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    try:
        db = SessionLocal()
        from app.services.google_sheets import google_sheets_service
        result = google_sheets_service.sync_all_data(db)
        return result
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return {"success": False, "error": str(e)}
    finally:
        db.close()