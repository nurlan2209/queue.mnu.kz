import logging
from datetime import datetime
from sqlalchemy.orm import Session
from sqlalchemy import event, text
from apscheduler.schedulers.background import BackgroundScheduler

from app.database import SessionLocal
from app.models.archive import ArchivedQueueEntry

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ë–î
scheduler = BackgroundScheduler()

def process_sync_log(db: Session):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        unprocessed = db.execute(text("""
            SELECT id, operation, entry_id FROM sync_log 
            WHERE processed = FALSE
            ORDER BY timestamp ASC
        """)).fetchall()
        
        if not unprocessed:
            return
            
        logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(unprocessed)} –∑–∞–ø–∏—Å–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É
        delete_operations = []
        update_operations = []
        
        for log_entry in unprocessed:
            log_id, operation, entry_id = log_entry
            if operation == 'DELETE':
                delete_operations.append((log_id, entry_id))
            elif operation == 'UPDATE':
                update_operations.append((log_id, entry_id))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è - –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        if delete_operations:
            logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(delete_operations)} —É–¥–∞–ª–µ–Ω–∏–π - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
            
            try:
                from app.services.google_sheets import google_sheets_service
                result = google_sheets_service.sync_all_data(db)
                
                if result.get("success"):
                    logger.info(f"‚úÖ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.get('synced_count', 0)} –∑–∞–ø–∏—Å–µ–π")
                    # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                    for log_id, entry_id in delete_operations:
                        db.execute(text("UPDATE sync_log SET processed = TRUE WHERE id = :log_id"), 
                                  {"log_id": log_id})
                        logger.info(f"üóëÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {entry_id} —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result.get('error')}")
                    
            except Exception as e:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º UPDATE –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        for log_id, entry_id in update_operations:
            try:
                from app.services.google_sheets import google_sheets_service
                
                # –î–ª—è UPDATE –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                entry = db.query(ArchivedQueueEntry).filter(
                    ArchivedQueueEntry.id == entry_id
                ).first()
                
                if entry:
                    result = google_sheets_service.update_entry_by_id(entry)
                    if result.get("success"):
                        logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å {entry_id} –≤ Google Sheets —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä –ë–î")
                        db.execute(text("UPDATE sync_log SET processed = TRUE WHERE id = :log_id"), 
                                  {"log_id": log_id})
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {entry_id}: {result.get('error')}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å {entry_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    db.execute(text("UPDATE sync_log SET processed = TRUE WHERE id = :log_id"), 
                              {"log_id": log_id})
                          
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ UPDATE –¥–ª—è {entry_id}: {e}")
        
        db.commit()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        db.rollback()

def process_sync_log_job():
    """–î–∂–æ–± –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        db = SessionLocal()
        process_sync_log(db)
        db.close()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∂–æ–±–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")

def setup_database_triggers(db: Session):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä—è–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ–≥–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º –¥–ª—è UUID)
        sync_log_table = """
        -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—Å—Ç—å —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
        DROP TABLE IF EXISTS sync_log;
        
        -- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
        CREATE TABLE sync_log (
            id SERIAL PRIMARY KEY,
            operation VARCHAR(10) NOT NULL,
            entry_id TEXT NOT NULL,
            timestamp TIMESTAMP DEFAULT NOW(),
            processed BOOLEAN DEFAULT FALSE
        );
        """
        
        # SQL —Ç—Ä–∏–≥–≥–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º $$..$$
        trigger_sql = """
        -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
        DROP FUNCTION IF EXISTS notify_archive_changes() CASCADE;
        
        -- –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
        CREATE OR REPLACE FUNCTION notify_archive_changes()
        RETURNS trigger AS $$
        BEGIN
            IF TG_OP = 'DELETE' THEN
                INSERT INTO sync_log (operation, entry_id, timestamp) 
                VALUES ('DELETE', OLD.id::text, NOW());
                RETURN OLD;
            ELSIF TG_OP = 'UPDATE' THEN
                INSERT INTO sync_log (operation, entry_id, timestamp) 
                VALUES ('UPDATE', NEW.id::text, NOW());
                RETURN NEW;
            END IF;
            RETURN NULL;
        END;
        $$ LANGUAGE plpgsql;

        -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        DROP TRIGGER IF EXISTS archive_delete_trigger ON archived_queue_entries;
        DROP TRIGGER IF EXISTS archive_update_trigger ON archived_queue_entries;
        
        -- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏–π
        CREATE TRIGGER archive_delete_trigger
            AFTER DELETE ON archived_queue_entries
            FOR EACH ROW
            EXECUTE FUNCTION notify_archive_changes();
            
        -- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ Adminer)
        CREATE TRIGGER archive_update_trigger
            AFTER UPDATE ON archived_queue_entries
            FOR EACH ROW
            EXECUTE FUNCTION notify_archive_changes();
        """
        
        db.execute(text(sync_log_table))
        db.execute(text(trigger_sql))
        db.commit()
        
        logger.info("‚úÖ –¢—Ä–∏–≥–≥–µ—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (DELETE + UPDATE)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ë–î: {e}")
        db.rollback()

class RealTimeSyncScheduler:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self):
        self.is_initialized = False
        self._setup_database_events()
    
    def _setup_database_events(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        if self.is_initialized:
            return
        
        # –°–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        @event.listens_for(ArchivedQueueEntry, 'after_insert')
        def after_insert_listener(mapper, connection, target):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –∞—Ä—Ö–∏–≤"""
            logger.info(f"üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –∞—Ä—Ö–∏–≤–µ: {target.id}")
            self._handle_insert(target)
        
        # –°–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        @event.listens_for(ArchivedQueueEntry, 'after_update')
        def after_update_listener(mapper, connection, target):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∞—Ä—Ö–∏–≤–µ"""
            logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∞—Ä—Ö–∏–≤–µ: {target.id}")
            self._handle_update(target)
        
        # üÜï –ù–û–í–û–ï: –°–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        @event.listens_for(ArchivedQueueEntry, 'after_delete')
        def after_delete_listener(mapper, connection, target):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞"""
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ –∞—Ä—Ö–∏–≤–∞: {target.id}")
            self._handle_delete(target)
        
        self.is_initialized = True
        logger.info("‚úÖ Database events –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ)")
    
    def _handle_insert(self, target: ArchivedQueueEntry):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            from app.services.google_sheets import google_sheets_service
            
            logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å {target.id} —Å Google Sheets")
            result = google_sheets_service.add_single_entry(target)
            
            if result["success"]:
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {target.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {target.id}: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {target.id}: {e}")
    
    def _handle_update(self, target: ArchivedQueueEntry):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        try:
            from app.services.google_sheets import google_sheets_service
            
            logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {target.id} —Å Google Sheets")
            result = google_sheets_service.update_entry_by_id(target)
            
            if result["success"]:
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {target.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {target.id}: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {target.id}: {e}")
    
    def _handle_delete(self, target: ArchivedQueueEntry):
        """üÜï –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        try:
            from app.services.google_sheets import google_sheets_service
            
            logger.info(f"üóëÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {target.id} –∏–∑ Google Sheets")
            result = google_sheets_service.delete_entry_by_id(str(target.id))
            
            if result["success"]:
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {target.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Google Sheets")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {target.id}: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {target.id}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
realtime_sync = RealTimeSyncScheduler()

def initialize_sync_scheduler():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        realtime_sync._setup_database_events()
        
        # üÜï –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –ë–î –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ Adminer
        db = SessionLocal()
        setup_database_triggers(db)
        db.close()
        
        # üÜï –ù–û–í–û–ï: –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–æ–≥–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (–∫–æ–º–ø—Ä–æ–º–∏—Å—Å —Å–∫–æ—Ä–æ—Å—Ç—å/–ª–æ–≥–∏)
        scheduler.add_job(
            func=process_sync_log_job,
            trigger="interval",
            seconds=10,
            id="process_sync_log",
            replace_existing=True
        )
        
        if not scheduler.running:
            scheduler.start()
        
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (SQLAlchemy + DB Triggers)")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False

def shutdown_sync_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    try:
        if scheduler.running:
            scheduler.shutdown()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

def manual_sync_trigger() -> dict:
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    logger.info("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    try:
        db = SessionLocal()
        from app.services.google_sheets import google_sheets_service
        result = google_sheets_service.sync_all_data(db)
        return result
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return {"success": False, "error": str(e)}
    finally:
        db.close()